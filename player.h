//====================================
//
// プレイヤー処理 [ player.h ]
// Author: Asuma Nishio
//
//=====================================

#ifndef _PLAYER_H_ // このマクロ定義がされてなかったら
#define _PLAYER_H_ // 2重インクルード防止のマクロ定義

//**********************
// インクルードファイル
//**********************
#include "object.h"
#include "model.h"
#include "motion.h"

//**********************
// 前方宣言
//**********************
class CInputKeyboard;
class CJoyPad;
class CCamera;
class CShadowS;
class CStateMachine;
class CPlayerStateBase;
class CAABBCollider;
class CSphereCollider;

//*************************
// プレイヤークラスを定義
//*************************
class CPlayer : public CObject
{
public:
	//***********************************
	// プレイヤーが行うモーション列挙型
	//***********************************
	enum PLAYERMOTION
	{
		PLAYERMOTION_NEUTRAL,		// ニュートラル
		PLAYERMOTION_MOVE,			// 移動
		PLAYERMOTION_ATTACK,		// 攻撃
		PLAYERMOTION_JUMP,			// ジャンプ
		PLAYERMOTION_LANDING,		// 着地
		PLAYERMOTION_BLOWOFF,		// ダメージ
		PLAYERMOTION_MOVEATTACK,	// 移動しながらのブロワーモーション
		PLAYERMOTION_MAX
	};

	//***********************************
	// ブロワーモード列挙型
	//***********************************
	enum BLOWER
	{
		BLOWER_SMALLPOW,
		BLOWER_MIDIUMPOW,
		BLOWER_MAXPOW,
		BLOWER_MAX
	};

	// コンストラクタ・デストラクタ
	CPlayer(int nPriority = static_cast<int>(CObject::PRIORITY::CHARACTOR));
	~CPlayer();

	// メンバ関数
	HRESULT Init(void);
	void Uninit(void);
	void Update(void);
	void Draw(void);
	void ChangeState(CPlayerStateBase* pNewState,int Id); // ステート変更
	void UpdateAction(CInputKeyboard* pInputKeyboard, D3DXMATRIX pMtx, const D3DXVECTOR3 DestMove, CJoyPad* pPad); // 通常攻撃更新関数
	void UpdateMove(CInputKeyboard* pInputKeyboard, CJoyPad* pPad);					  // 移動更新関数
	void UpdateJumpAction(CInputKeyboard* pInputKeyboard, D3DXMATRIX pMtx, const D3DXVECTOR3 DestMove, CJoyPad* pPad);
	void StartJump(void);
	void HitDamage(int nDamage);
	void EnemyBlow(void);
	bool Collision(CSphereCollider * pOther);

	// セッター
	void SetRotDest(D3DXVECTOR3 rotDest) { m_rotDest = rotDest; }
	void SetJump(bool isJump) { m_isJump = isJump; }
	void SetLanding(bool isLanding) { m_isLanding = isLanding; }
	void AddMove(void) { m_pos += m_move; }
	void SetValue(float fValue) { m_fValue = fValue; }
	void JumpMove(void) { m_move.y = m_fValue; }
	void SetBlower(int nType);
	void SetMove(D3DXVECTOR3 move) { m_move = move; }

	// ゲッター
	D3DXVECTOR3 GetPos(void) { return m_pos; }			// 現在の座標を取得
	D3DXVECTOR3 GetOldPos(void) { return m_posOld; }	// 過去の座標を取得
	D3DXVECTOR3 GetRot(void) { return m_rot; }			// 現在の角度を取得
	D3DXVECTOR3 GetRotDest(void) { return m_rotDest; }	// 目的角を取得
	PLAYERMOTION GetNowMotion(void) const;

	CModel* GetModelPartType(CModel::PARTTYPE modelpart);
	CMotion* GetMotion(void) { return m_pMotion; }
	CStateMachine* GetStateMachine() { return m_pStateMachine; }	// プレイヤーのステートマシンを取得
	CModel** GetModel(void) { return m_apModel; }
	int GetBlowType() const { return static_cast<int>(m_blower); }

	// フラグメント関数
	bool IsJumping() { return m_isJump; } 	// ジャンプ状態の確認
	bool isMoveInputKey(CInputKeyboard* pKeyInput);
	bool isMovePadButton(CJoyPad* pPad);
	bool isLanding(void) { return m_isJump; }
	bool GetLanding(void) { return m_isLanding; }
	bool GetIsAttack(void) { return m_isAttack; }

	// 静的メンバ関数
	static CPlayer* Create(D3DXVECTOR3 pos, D3DXVECTOR3 rot, int nLife,const char* pFilename); // 生成処理
	static bool IsDeath(void) { return m_isDeath; }

private:
	static inline constexpr int MAX_MODEL = 16; // プレイヤーで使うモデルの数

	D3DXVECTOR3 m_move;		// 移動量
	D3DXVECTOR3 m_rotDest;  // 目的角

	D3DXVECTOR3 m_pos;		// 階層構造設定座標
	D3DXVECTOR3 m_posOld;	// 過去の座標情報
	D3DXVECTOR3 m_rot;		// 角度
	D3DXVECTOR3 m_Scal;		// 拡大率
	D3DXMATRIX m_mtxworld;	// ワールドマトリックス

	CModel* m_apModel[MAX_MODEL];	// 使うモデルのポインタ
	CMotion* m_pMotion;				// モーションのポインタ
	CShadowS* m_pShadowS;			// ステンシルシャドウクラスポインタ
	CStateMachine* m_pStateMachine;	// ステート基底クラスのポインタ
	CSphereCollider* m_pSphereCollider; // 球のコライダー

	int m_blower;			// 種類

	int m_nNumAll;			// モデル総数
	int m_State;			// 状態管理カウンター

	bool m_isLanding;		// 着地判定
	bool m_isJump;			// ジャンプ判定
	bool m_isMoving;		// 移動キー判定
	bool m_isAttack;		// 攻撃判定

	float m_fAngle;			// 現在の角度
	float m_fValue;			// 加算量
	float m_fBlowerRange;	// 影響範囲
	float m_fBlowerPow;		// ブロワーの強度
	const char* m_pFilename; // 読み込むファイル名

	static bool m_isDeath; // 静的
};

#endif