//=====================================
//
// Xファイル処理 [ objectX.h ]
// Author: Asuma Nishio
//
//=====================================

#ifndef _OBJECTX_H_ // このマクロ定義がされてなかったら
#define _OBJECTX_H_ // 2重インクルード防止のマクロ定義

//**********************
// インクルードファイル
//**********************
#include "object.h"

//******************************
// オブジェクトXクラスを定義
//******************************
class CObjectX : public CObject
{
public:
	// コンストラクタ・デストラクタ
	CObjectX(int nPriority = static_cast<int>(CObject::PRIORITY::MODELOBJECT));
	~CObjectX();

	// メンバ関数
	HRESULT Init(void);
	void Uninit(void);
	void Update(void);
	void Draw(void); 

	// セッター
	void SetFilePass(const char* pFilePass) { m_pFileName = pFilePass; }
	void SetPos(D3DXVECTOR3 pos) { m_pos = pos; }
	void SetRot(D3DXVECTOR3 rot) { m_rot = rot; }
	void SetScale(D3DXVECTOR3 Scale) { m_Scale = Scale; }
	void SetUseQuat(bool isFlags) { m_isUseQaut = isFlags; }
	void SetMtxWorld(D3DXMATRIX mtxworld) { m_mtxWorld = mtxworld; }
	void SetParent(CObjectX* pParent) { m_pParent = pParent; }

	// ゲッター
	D3DXVECTOR3 GetPos(void) { return m_pos; };
	D3DXVECTOR3 GetRot(void) { return m_rot; };
	D3DXVECTOR3 GetScale(void) { return m_Scale; }
	D3DXVECTOR3 GetSize(void) { return m_fsize; }
	D3DXMATRIX GetMtxWorld(void) { return m_mtxWorld; }
	CObjectX*GetParent(void) { return m_pParent; }


	const char* GetFileName()const { return m_pFileName; }

	// 静的メンバ関数
	static CObjectX* Create(const char* pFileName,D3DXVECTOR3 pos);

private:
	D3DXMATRIX m_mtxWorld; // ワールドマトリックス
	LPD3DXMESH m_pMesh;	   // メッシュ情報
	LPD3DXBUFFER m_pBuffMat; // マテリアル情報
	DWORD m_dwNumMat;		// マテリアル数
	CObjectX* m_pParent;	// 親

	D3DXVECTOR3 m_pos;		// 座標
	D3DXVECTOR3 m_rot;		// 角度
	D3DXVECTOR3 m_Scale;	// 拡大率
	D3DXVECTOR3 m_fsize;	// サイズ
	D3DXVECTOR3 m_Vtxmin;
	D3DXVECTOR3 m_Vtxmax;

	int m_nIdxTexture;		// テクスチャインデックス
	int* m_pTexture;		// テクスチャポインタ

	const char* m_pFileName; // ファイル名

	bool m_isUseQaut;		 // クォータニオンかどうか
};

#endif